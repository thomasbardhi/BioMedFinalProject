# -*- coding: utf-8 -*-
"""Comparing Preprocessing and Deep Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10CaPdg3otU1AHxRI1wHsE9Tp02Fp6h_z
"""

try:
  from google.colab import drive
  IN_COLAB=True
except:
  IN_COLAB=False

if IN_COLAB:
  print("We're running Colab")

# Commented out IPython magic to ensure Python compatibility.
if IN_COLAB:
  # Mount the Google Drive at mount
  mount='/content/gdrive'
  print("Colab: mounting Google drive on ", mount)

  drive.mount(mount)

  # Switch to the directory on the Google Drive that you want to use
  import os
  drive_root = mount + "/My Drive/Colab Notebooks/Biomedical Image Analysis/Final Project"
  
  # Create drive_root if it doesn't exist
  create_drive_root = True
  if create_drive_root:
    print("\nColab: making sure ", drive_root, " exists.")
    os.makedirs(drive_root, exist_ok=True)
  
  # Change to the directory
  print("\nColab: Changing directory to ", drive_root)
#   %cd $drive_root

import preprocessing as pps

# Define your image and output directories
image_dir = '/content/gdrive/MyDrive/Colab Notebooks/Biomedical Image Analysis/Final Project/Images'
output_dir = '/content/gdrive/MyDrive/Colab Notebooks/Biomedical Image Analysis/Final Project/SegImg'

pps.process_images(image_dir, output_dir)

import os
from PIL import Image
import tifffile as tiff

# Get the images and convert them to a list
image_dir = '/content/gdrive/MyDrive/Colab Notebooks/Biomedical Image Analysis/Final Project/Images'
image_files = [f for f in os.listdir(image_dir) if f.endswith('.tif')]
image_files.sort()

# Get the Segmented Images and Convert Them to a List
seg_dir = '/content/gdrive/MyDrive/Colab Notebooks/Biomedical Image Analysis/Final Project/SegImg'
seg_files = [f for f in os.listdir(seg_dir) if f.endswith('.tif')]
seg_files.sort()

!pip install cellpose 
!pip install mxnet-cu102

from cellpose import models
import numpy as np
import cv2

# paths to your training images and corresponding masks
def read_image(image_path):
    image = tiff.imread(image_path)
    
    # If the image is color, convert it to grayscale
    if len(image.shape) == 3 and image.shape[-1] != 1:
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    return image

def read_mask(mask_path):
    mask = tiff.imread(mask_path)

    # If the mask is color, convert it to grayscale
    if len(mask.shape) == 3 and mask.shape[-1] != 1:
        mask = cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)

    return mask

# Assume X is a list of images and Y is a list of corresponding masks
X = [read_image('Images/'+ img) for img in image_files]
X =X[0:1]
Y = [read_mask('SegImg/' + img) for img in seg_files]
Y =Y[0:1]

# Initialize the model you want to train
# model_type can be 'cyto' or 'nuclei'
model = models.Cellpose(gpu=False, model_type='nuclei')
# Train the model on your data
model.train(X, Y, channels=[1,0])

#Save the model
#model.save_model('/content/gdrive/MyDrive/Colab Notebooks/Biomedical Image Analysis/Final Project/')

image_dir_test = '/content/gdrive/MyDrive/Colab Notebooks/Biomedical Image Analysis/Final Project/Images_test'
seg_dir_test = '/content/gdrive/MyDrive/Colab Notebooks/Biomedical Image Analysis/Final Project/SegImg_test'

pps.process_images(image_dir_test, seg_dir_test)

# Get the test images and convert them to a list
image_files_test = [f for f in os.listdir(image_dir_test) if f.endswith('.tif')]
image_files_test.sort()

# Get the test Segmented Images and Convert Them to a List
seg_files_test = [f for f in os.listdir(seg_dir_test) if f.endswith('.tif')]
seg_files_test.sort()

from cellpose import utils
from sklearn.metrics import jaccard_score

# Load your test data
# Assume X_test is a list of test images and Y_test is a list of corresponding masks
X_test = [read_image(img_path) for img_path in image_files_test]
X_test[0:2]
Y_test = [read_mask(mask_path) for mask_path in seg_files_test]
Y_test = Y_test[0:2]
# Initialize a list to store the Jaccard scores for all test images
jaccard_scores = []

# Iterate over all test images
for i in range(len(X_test)):
  masks, flows, styles, diams = model.eval(X_test[i], diameter=None, channels=[1,0])
  masks = utils.masks_to_labels(masks)
  score = jaccard_score(Y_test[i].flatten(), masks.flatten())
  jaccard_scores.append(score)

# Calculate the average Jaccard score
average_score = np.mean(jaccard_scores)
print(f'Average Jaccard Score: {average_score}')
#received an average score .51134







